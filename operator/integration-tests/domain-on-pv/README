Copyright (c) 2023, Oracle and/or its affiliates.
Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

--------
SUMMARY:
--------

This is a stand alone test for running the sample in
'kubernetes/samples/scripts/create-weblogic-domain/domain-on-pv'.

This is _also_- used to generate the sample domain resources and
ingresses that are checked into the sample.

To run the test:

   Usage:
     ./run-test.sh -?

   WLS mode - main test:
     ./run-test.sh -precleanup -oper -traefik -initial-main

   WLS mode - main test with building image:
     ./run-test.sh -precleanup -oper -traefik -initial-image -initial-main
        -or-
     ./run-test.sh -precleanup
     ./run-test.sh -oper
     ./run-test.sh -traefik 
     ./run-test.sh -initial-image
     ./run-test.sh -initial-main

   JRF mode:
     ./run-test.sh -precleanup -oper -traefik -precleandb -jrf -db -initial-image -initial-main

--------------------
SAMPLE REGENERATION:
--------------------

If you want to change the ingresses or domain resources in the sample,
then keep in mind that these are generated files. To modify them:

# (1) modify the following as needed:
#  ./dpv-sample-wrapper/dpv-domain.yaml.template-JRF
#  ./dpv-sample-wrapper/dpv-domain.yaml.template-WLS
#  ./dpv-sample-wrapper/stage-and-create-ingresses.sh

# (2) generate the new git sample source
cd ./dpv-sample-wrapper
rm -fr /tmp/sample   # deletes default output location for the following command
./generate-sample-doc.sh # generates sample, expect 'mismatch' failures due to mismatch with existing git source

# (3) copy over changes in generated files to the git sample source:
cp /tmp/sample/ingresses/*.yaml ../../../../kubernetes/samples/scripts/create-weblogic-domain/ingresses
cp /tmp/sample/domain-resources/JRF/*.yaml ../../../../kubernetes/samples/scripts/create-weblogic-domain/domain-on-pv/domain-resources/JRF
cp /tmp/sample/domain-resources/WLS/*.yaml ../../../../kubernetes/samples/scripts/create-weblogic-domain/domain-on-pv/domain-resources/WLS

# (4) verify the changes copied over correctly
rm -fr /tmp/sample
./generate-sample-doc.sh # expect pass this time

# (5) run the sample test to make sure the modifications are fine

# (6) git add/commit/push the changed domain resource and/or ingress YAML files


------
NOTES:
------

- The order of the parameters doesn't matter.

- To customize the location of output, etc, 
  see the customizable env vars described by
  './run-test.sh -?'.

- The '-precleanup' option:
  - Calls 'cleanup.sh' before doing anything else, 
    which deletes almost everything in your k8s cluster.
  - Deletes the current WORKDIR before proceeding.

- The '-db' option will cause the test to deploy Oracle DB,
  '-oper' builds/deploys the operator, and '-traefik' deploys
  traefik. It is not necessary to use these options if the 
  corresponding service is already running:

  - Make sure operator is monitoring DOMAIN_NAMESPACE.
  - Make sure Oracle DB is running in DB_NAMESPACE and 
    can be reached by the URLs and credentials defined
    in the sample's secrets.
  - Make sure traefik is running with node port 
    TRAEFIK_HTTP_NODEPORT (default 30305), in namespace
    TRAEFIK_NAMESPACE. If TRAEFIK_HTTP_NODEPORT is set
    to 0 that's fine, the test will dynamically find
    the actual nodeport.

- Call '-rcu' if `createIfExists` mode is other than `DomainAndRCU` and the database is not already RCU initialized.

- You can run the test in stages. For example:
  ./run-test.sh -precleanup 
  ./run-test.sh -oper
  ./run-test.sh -traefik
  ./run-test.sh -initial-image
  ./run-test.sh -initial-main

- If you are not running Kubernetes locally on a single machine,
  then you will need to set image pull env vars and deploy image pull secrets
  before calling the test (see ./run-test.sh -? for
  env vars). Remember to set the image name env var
  with registry location.
