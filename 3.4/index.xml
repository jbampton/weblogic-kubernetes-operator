<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebLogic Kubernetes Operator</title>
    <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/</link>
    <description>Recent content on WebLogic Kubernetes Operator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Dec 2021 17:04:41 -0500</lastBuildDate><atom:link href="https://oracle.github.io/weblogic-kubernetes-operator/3.4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/overview/</link>
      <pubDate>Sun, 05 Dec 2021 16:47:21 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/overview/</guid>
      <description>An operator runtime is a process that runs in a container deployed into a Kubernetes Pod and that automatically manages domain resources. A domain resource references WebLogic domain configuration, a WebLogic installation image, Kubernetes secrets, and anything else necessary to run a particular WebLogic domain. The operator requires Helm for its installation and tuning.
A single operator instance is capable of managing multiple domains in multiple namespaces depending on how it is configured.</description>
    </item>
    
    <item>
      <title>Answers for newcomers</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/newbie/</link>
      <pubDate>Thu, 19 Sep 2019 10:41:32 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/newbie/</guid>
      <description>What is the WebLogic Kubernetes Operator, how can I get started with it, where is its documentation? It&amp;rsquo;s all here.
How much does it cost? The WebLogic Kubernetes Operator (the “operator”) is open source and free, licensed under the Universal Permissive license (UPL), Version 1.0.
WebLogic Server is not open source. Licensing is required for each running WebLogic Server instance, just as with any deployment of WebLogic Server. Licensing is free for a single developer desktop development environment.</description>
    </item>
    
    <item>
      <title>Container image layering</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/layering/</link>
      <pubDate>Thu, 11 Apr 2019 13:15:32 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/layering/</guid>
      <description>Container images are composed of layers, as shown in the diagram below. If you download the standard weblogic:12.2.1.4 image from the Oracle Container Registry, then you can see these layers using the command docker inspect container-registry.oracle.com/middleware/weblogic:12.2.1.4 (the domain layer will not be there). You are not required to use layers, but efficient use of layers is considered a best practice.
Why is it important to maintain the layering of images? Layering is an important technique in container images.</description>
    </item>
    
    <item>
      <title>Container image protection</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/domain-security/image-protection/</link>
      <pubDate>Fri, 08 Mar 2019 19:00:49 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/domain-security/image-protection/</guid>
      <description>Oracle strongly recommends storing the container images that contain a WebLogic domain home as private in the container registry. In addition to any local registry, public container registries include GitHub Container Registry and the Oracle Cloud Infrastructure Registry (OCIR).
The WebLogic domain home that is part of a Domain in Image image contains sensitive information about the domain including keys and credentials that are used to access external resources (for example, the data source password).</description>
    </item>
    
    <item>
      <title>Certificates</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/certificates/</link>
      <pubDate>Wed, 06 Mar 2019 21:14:18 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/certificates/</guid>
      <description>This document is now located in the operator user guide, see REST Services.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/prerequisites/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/prerequisites/</guid>
      <description>Prerequisites for all domain types Choose the type of domain you&amp;rsquo;re going to use throughout the sample, WLS or JRF.
The first time you try this sample, we recommend that you choose WLS even if you&amp;rsquo;re familiar with JRF. This is because WLS is simpler and will more easily familiarize you with Model in Image concepts. We recommend choosing JRF only if you are already familiar with JRF, you have already tried the WLS path through this sample, and you have a definite use case where you need to use JRF.</description>
    </item>
    
    <item>
      <title>Contribute to the operator</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/contributing/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:19 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/contributing/</guid>
      <description>Oracle welcomes contributions to this project from anyone. Contributions may be reporting an issue with the operator or submitting a pull request. Before embarking on significant development that may result in a large pull request, it is recommended that you create an issue and discuss the proposed changes with the existing developers first.
If you want to submit a pull request to fix a bug or enhance an existing feature, please first open an issue and link to that issue when you submit your pull request.</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/requirements/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:19 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/requirements/</guid>
      <description>In addition to the requirements listed here, the following software is also required to obtain and build the operator:
Git (1.8 or later recommended) Java Developer Kit (11 required, 11.0.2 recommended) Apache Maven (3.5.3 min, 3.6 recommended) The operator is written primarily in Java, BASH shell scripts, and WLST scripts.
Because the target runtime environment for the operator is Oracle Linux, no particular effort has been made to ensure the build or tests run on any other operating system.</description>
    </item>
    
    <item>
      <title>Startup and shutdown</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/startup/</link>
      <pubDate>Sat, 23 Feb 2019 17:04:41 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/startup/</guid>
      <description>Contents Introduction Starting and stopping servers serverStartPolicy rules Available serverStartPolicy values Administration Server start and stop rules Standalone Managed Server start and stop rules Clustered Managed Server start and stop rules Server start state Common starting and stopping scenarios Normal running state Shut down all the servers Only start the Administration Server Shut down a cluster Shut down a specific standalone server Force a specific clustered Managed Server to start Shutdown options Shutdown environment variables shutdown rules Restarting servers Fields that cause servers to be restarted Rolling restarts Draining a node and PodDisruptionBudget Common restarting scenarios Using restartVersion to force the operator to restart servers Restart all the servers in the domain Restart all the servers in the cluster Restart the Administration Server Restart a standalone or clustered Managed Server Full domain restarts Domain lifecycle sample scripts Introduction There are fields on the Domain that specify which servers should be running, which servers should be restarted, and the desired initial state.</description>
    </item>
    
    <item>
      <title>OCR images</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/ocr-images/</link>
      <pubDate>Sat, 23 Feb 2019 16:45:55 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/ocr-images/</guid>
      <description>Contents Overview Understand Oracle Container Registry images Compare General Availability to Critical Patch Updates images WebLogic distribution installer type Compare &amp;ldquo;dated&amp;rdquo; and &amp;ldquo;undated&amp;rdquo; images Example OCR image names Obtain images from the Oracle Container Registry Inspect images Ensure you are using recently patched images Overview A container image with WebLogic Server or Fusion Middleware Infrastructure is required to run WebLogic domains in Kubernetes. Oracle recommends obtaining these WebLogic images from the Oracle Container Registry (OCR) or creating custom images using the WebLogic Image Tool.</description>
    </item>
    
    <item>
      <title>Prepare to run a domain</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/prepare/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:45 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/prepare/</guid>
      <description>Perform these steps to prepare your Kubernetes cluster to run a WebLogic domain:
Create the domain namespace or namespaces. One or more domains can share a namespace. A single instance of the operator can manage multiple namespaces.
$ kubectl create namespace domain-namespace-1 Replace domain-namespace-1 with name you want to use. The name must follow standard Kubernetes naming conventions, that is, lowercase, numbers, and hyphens.
Create a Kubernetes Secret containing the Administration Server boot credentials.</description>
    </item>
    
    <item>
      <title>Important terms</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/terms/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:10 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/terms/</guid>
      <description>This documentation uses several important terms which are intended to have a specific meaning.
Term Definition Cluster Because this term is ambiguous, it will be prefixed to indicate which type of cluster is meant. A WebLogic cluster is a group of WebLogic Managed Servers that together host some application or component and which are able to share load and state between them; a single WebLogic domain can define multiple WebLogic clusters.</description>
    </item>
    
    <item>
      <title>Prepare for installation</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/preparation/</link>
      <pubDate>Sun, 05 Dec 2021 16:47:21 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/preparation/</guid>
      <description>Introduction A single operator instance is capable of managing multiple domains in multiple namespaces, depending on how it is configured. A Kubernetes cluster can host multiple operators, but no more than one per namespace.
Before installing an operator, ensure that each of these prerequisite requirements is met:
Check environment Set up the operator Helm chart access Inspect the operator Helm chart Prepare an operator namespace and service account Prepare operator image Locating an operator image Default operator image Pulling operator image Customizing operator image name, pull secret, and private registry Determine the platform setting Choose a security strategy Any namespace with cluster role binding enabled Any namespace with cluster role binding disabled Local namespace only with cluster role binding disabled Choose a domain namespace selection strategy Choose a Helm release name Be aware of advanced operator configuration options Special use cases: How to download the Helm chart if Internet access is not available How to manually install the Domain resource custom resource definition (CRD) Check environment Review the Operator prerequisites to ensure that your Kubernetes cluster supports the operator.</description>
    </item>
    
    <item>
      <title>Namespace management</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/namespace-management/</link>
      <pubDate>Thu, 19 Sep 2019 10:41:32 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/namespace-management/</guid>
      <description>This document is now located in the operator user guide, see Namespace management.</description>
    </item>
    
    <item>
      <title>Why layering matters</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/why-layering-matters/</link>
      <pubDate>Thu, 11 Apr 2019 13:27:58 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/why-layering-matters/</guid>
      <description>How does layering affect our CI/CD process? Now that we know more about layering, let’s talk about why it is important to our CI/CD process. Let&amp;rsquo;s consider the kinds of updates we might want to make to our domain:
You might want to update the domain by:
Installing a patch on the operating system or a library. Updating the version of the JDK you are using. Picking up a new version of WebLogic Server.</description>
    </item>
    
    <item>
      <title>Cannot pull image</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/cannot-pull-image/</link>
      <pubDate>Sat, 23 Mar 2019 08:08:19 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/cannot-pull-image/</guid>
      <description>My domain will not start and I see errors like ImagePullBackoff or Cannot pull image
When you see these kinds of errors, it means that Kubernetes cannot find your container image. The most common causes are:
The image value in your Domain is set incorrectly, meaning Kubernetes will be trying to pull the wrong image. The image requires authentication or permission to pull it and you have not configured Kubernetes with the necessary credentials, for example in an imagePullSecret.</description>
    </item>
    
    <item>
      <title>External network access security</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/domain-security/weblogic-channels/</link>
      <pubDate>Fri, 08 Mar 2019 19:07:36 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/domain-security/weblogic-channels/</guid>
      <description>WebLogic T3 and administrative channels Oracle recommends not exposing any administrative, RMI, or T3 channels outside the Kubernetes cluster unless absolutely necessary.
If exposing an administrative, RMI, EJB, JMS, or T3 capable channel using a load balancer, port forwarding, NodePorts, or similar, then limit access by using a custom dedicated WebLogic Server port that you have configured with the T3 or administration protocol (a network access point) instead of relaying the traffic to a default port, leverage two-way SSL, use controls like security lists, and/or set up a Bastion to provide access.</description>
    </item>
    
    <item>
      <title>Restarting</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/restarting/</link>
      <pubDate>Sat, 23 Feb 2019 20:58:51 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/restarting/</guid>
      <description>This document describes when WebLogic Server instances should and will be restarted in the Kubernetes environment.
Overview There are many situations where changes to the WebLogic or Kubernetes environment configuration require that all the servers in a domain or cluster be restarted, for example, when applying a WebLogic Server patch or when upgrading an application.
One of the operator&amp;rsquo;s most important jobs is to start and stop WebLogic Server instances by creating and deleting their corresponding Kubernetes pods.</description>
    </item>
    
    <item>
      <title>Design philosophy</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/design/</link>
      <pubDate>Sat, 23 Feb 2019 20:51:51 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/design/</guid>
      <description>The WebLogic Kubernetes Operator (the “operator”) is designed to fulfill a similar role to that which a human operator would fill in a traditional data center deployment. It contains a set of useful built-in knowledge about how to perform various life cycle operations on a domain correctly.
Human operators are typically responsible for starting and stopping environments, performing scaling operations, performing manual tasks associated with disaster recovery and high availability needs and coordinating actions with other operators in other data centers.</description>
    </item>
    
    <item>
      <title>Use the Remote Console</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/accessing-the-domain/admin-console/</link>
      <pubDate>Sat, 23 Feb 2019 17:39:15 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/accessing-the-domain/admin-console/</guid>
      <description>The WebLogic Remote Console is a lightweight, open source console that does not need to be collocated with a WebLogic Server domain. It is an alternative to the WebLogic Server Administration Console. You can install and run the Remote Console anywhere. For an introduction, read the blog, &amp;ldquo;The NEW WebLogic Remote Console&amp;rdquo;. For detailed documentation, see the WebLogic Remote Console.
A major benefit of using the Remote Console is that it runs in your browser or a desktop application, and can be used to connect to different WebLogic Server instances.</description>
    </item>
    
    <item>
      <title>Initial use case</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/initial/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/initial/</guid>
      <description>Contents Overview Image creation Image creation - Introduction Understanding your first archive Staging a ZIP file of the archive Staging model files Creating the image with WIT Deploy resources Deploy resources - Introduction Secrets Domain resource Overview In this use case, you set up an initial WebLogic domain. This involves:
A WDT archive ZIP file that contains your applications. A WDT model that describes your WebLogic configuration. A container image that contains your WDT model files and archive.</description>
    </item>
    
    <item>
      <title>Create custom images</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/custom-images/</link>
      <pubDate>Sat, 23 Feb 2019 16:45:55 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/custom-images/</guid>
      <description>Contents Use the WebLogic Image Tool to create custom images Create a custom image with patches applied Create a custom base image Create a custom image with your domain inside the image Create a custom image with your model inside the image Use the WebLogic Image Tool to create custom images You can use the WebLogic Image Tool (WIT) to build your own WebLogic Server or Fusion Middleware Infrastructure images (with the latest Oracle Linux images, Java updates, and WebLogic Server patches), apply one-off patches to existing OCR images, or overlay your own files and applications on top of an OCR image.</description>
    </item>
    
    <item>
      <title>Domain resource</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-resource/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:45 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-resource/</guid>
      <description>Contents Overview Prerequisites Deploying domain resource YAML files Domain resource attribute references Using kubectl explain Domain spec elements JVM memory and Java option environment variables Pod generation Overview Use this document to create your own Domain resource, which can be used to configure the operation of your WebLogic Server domain. The Domain resource does not replace the traditional domain configuration files, but instead cooperates with those files to describe the Kubernetes artifacts of the corresponding domain.</description>
    </item>
    
    <item>
      <title>Operator prerequisites</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/prerequisites/introduction/</link>
      <pubDate>Sat, 23 Feb 2019 16:40:54 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/prerequisites/introduction/</guid>
      <description>For the current production release 3.4.7 :
Kubernetes 1.19.15+, 1.20.11+, 1.21.5+, 1.22.5+, 1.23.4+, and 1.24.0+ (check with kubectl version). NOTE: Kubernetes 1.25 and 1.26 will be supported only by 4.0 releases. Flannel networking v0.13.0-amd64 or later (check with docker images | grep flannel), Calico networking v3.16.1 or later, or OpenShift SDN on OpenShift 4.3 systems. Docker 19.03.1+ (check with docker version) or CRI-O 1.20.2+ (check with crictl version | grep RuntimeVersion).</description>
    </item>
    
    <item>
      <title>Boot identity not valid</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/boot-identity-not-valid/</link>
      <pubDate>Mon, 02 Mar 2020 08:08:19 -0401</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/boot-identity-not-valid/</guid>
      <description>One or more WebLogic Server instances in my domain will not start and I see errors in the server log like this:
***&amp;lt;Feb 6, 2020 12:05:35,550 AM GMT&amp;gt; &amp;lt;Critical&amp;gt; &amp;lt;Security&amp;gt; &amp;lt;BEA-090402&amp;gt; &amp;lt;Authentication denied: Boot identity not valid. The user name or password or both from the boot identity file (boot.properties) is not valid. The boot identity may have been changed since the boot identity file was created. Please edit and update the boot identity file with the proper values of username and password.</description>
    </item>
    
    <item>
      <title>Choose an approach</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/choose-an-approach/</link>
      <pubDate>Thu, 11 Apr 2019 13:36:57 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/choose-an-approach/</guid>
      <description>Let&amp;rsquo;s review what we have discussed and talk about when we might want to use various approaches. We can start by asking ourselves questions like these:
Can you make the desired change with a configuration override or Model in Image ConfigMap?
When your domain home source type is Domain in PV or Domain in Image, the operator allows you to inject a number of configuration overrides into your pods before starting any servers in the domain.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/architecture/</link>
      <pubDate>Sat, 23 Feb 2019 20:51:45 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/architecture/</guid>
      <description>Contents Overall architecture Domain architecture Domain UID Network name predictability Domain state stored outside container images Overall architecture The operator consists of the following parts:
The operator runtime, which is a process that: Runs in a container deployed into a Kubernetes Pod and that monitors one or more Kubernetes namespaces. Performs the actual management tasks for domain resources deployed to these namespaces. A Helm chart for installing the operator runtime and its related resources.</description>
    </item>
    
    <item>
      <title>Use WLST</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/accessing-the-domain/wlst/</link>
      <pubDate>Sat, 23 Feb 2019 17:39:19 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/accessing-the-domain/wlst/</guid>
      <description>You can use the WebLogic Scripting Tool (WLST) to manage a domain running in Kubernetes.
To give WLST access to a domain running in Kubernetes, you can:
Use kubectl exec Use a NodePort Use port forwarding Use kubectl exec You can use the kubectl exec command to start an interactive WLST session within a pod or to remotely run a WLST script on a pod. Typically, this is the preferred method.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/encryption/</link>
      <pubDate>Sat, 23 Feb 2019 17:36:29 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/encryption/</guid>
      <description>Contents Introspector encryption Encryption of Kubernetes Secrets Additional reading Introspector encryption The operator has an introspection job that handles WebLogic domain encryption. The introspection job also addresses the use of Kubernetes Secrets with configuration overrides. For additional information on the configuration handling, see Configuration overrides.
The introspection job also creates a boot.properties file that is made available to the pods in the WebLogic domain. The credential used for the WebLogic domain is kept in a Kubernetes Secret which follows the naming pattern &amp;lt;domainUID&amp;gt;-weblogic-credentials, where &amp;lt;domainUID&amp;gt; is the unique identifier of the domain, for example, mydomain-weblogic-credentials.</description>
    </item>
    
    <item>
      <title>Update 1</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update1/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update1/</guid>
      <description>This use case demonstrates dynamically adding a data source to your running domain by updating your model and rolling your domain. It demonstrates several features of WDT and Model in Image:
The syntax used for updating a model is the same syntax you use for creating the original model. A domain&amp;rsquo;s model can be updated dynamically by supplying a model update in a file in a Kubernetes ConfigMap. Model updates can be as simple as changing the value of a single attribute, or more complex, such as adding a JMS Server.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/building/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:24 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/building/</guid>
      <description>The operator is built using Apache Maven. The build machine will also need to have Docker installed.
To build the operator, issue the following command in the project directory:
$ mvn clean install This will compile the source files, build JAR files containing the compiled classes and libraries needed to run the operator, and will also execute all of the unit tests.
Contributions must conform to coding and formatting standards.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/scaling/</link>
      <pubDate>Sat, 23 Feb 2019 17:04:45 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/scaling/</guid>
      <description>WebLogic Server supports two types of clustering configurations, configured and dynamic. Configured clusters are created by defining each individual Managed Server instance. In dynamic clusters, the Managed Server configurations are generated from a single, shared template. With dynamic clusters, when additional server capacity is needed, new server instances can be added to the cluster without having to configure them individually. Also, unlike configured clusters, scaling up of dynamic clusters is not restricted to the set of servers defined in the cluster but can be increased based on runtime demands.</description>
    </item>
    
    <item>
      <title>Installation and upgrade</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/installation/</link>
      <pubDate>Sat, 23 Feb 2019 16:47:21 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/installation/</guid>
      <description>Contents Introduction Install the operator Set up domain namespaces Update a running operator Upgrade the operator Uninstall the operator Installation sample Introduction This installation guide describes how to configure, install (deploy), update, upgrade, and uninstall an instance of the WebLogic Kubernetes Operator. A single instance is capable of managing multiple domains in multiple namespaces, depending on how it is configured. A Kubernetes cluster can host multiple operators, but no more than one per namespace.</description>
    </item>
    
    <item>
      <title>Patch running domains</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/patch-images/</link>
      <pubDate>Sat, 23 Feb 2019 16:45:55 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/patch-images/</guid>
      <description>Apply patched images to a running domain When updating the WebLogic binaries of a running domain in Kubernetes with a patched container image, the operator applies the update in a zero downtime fashion. The procedure for the operator to update the running domain differs depending on the domain home source type. See the following corresponding sections:
Domain in PV Model in Image with auxiliary images Model in Image without auxiliary images Domain in Image For a broader description of managing the evolution and mutation of container images to run WebLogic Server in Kubernetes, see CI/CD.</description>
    </item>
    
    <item>
      <title>Supported environments</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/platforms/environments/</link>
      <pubDate>Sat, 23 Feb 2019 16:40:54 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/platforms/environments/</guid>
      <description>Contents Overview Important notes about specific environments Oracle Cloud Infrastructure (OCI) Oracle Linux Cloud Native Environment (OLCNE) Oracle Private Cloud Appliance (PCA) and Oracle Private Cloud at Customer (OPCC) Microsoft Azure VMware Tanzu Kubernetes Grid (TKG) OpenShift WebLogic Server running in Kubernetes connecting to an Oracle Database also running in Kubernetes Development-focused Kubernetes distributions Pricing and licensing WebLogic Kubernetes Operator WebLogic Server Oracle Linux Oracle Java WebLogic Server or Fusion Middleware Infrastructure Images Additional references Overview The operator supports running on production grade Kubernetes environments, including on-premises, cloud offerings where Kubernetes is supplied for you, and cloud offerings where you set up Kubernetes yourself.</description>
    </item>
    
    <item>
      <title>Domain resource</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/reference/domain-resource/</link>
      <pubDate>Fri, 22 Feb 2019 16:17:07 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/reference/domain-resource/</guid>
      <description>View the Domain reference document here.</description>
    </item>
    
    <item>
      <title>Get images</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/get-images/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/get-images/</guid>
      <description>Get these images and put them into your local registry. Pull the operator image:
$ docker pull ghcr.io/oracle/weblogic-kubernetes-operator:3.4.7 Pull the Traefik ingress controller image:
$ docker pull traefik:2.2.1 Obtain the WebLogic Server image from the Oracle Container Registry.
a. First time users, follow these directions.
b. Find and then pull the WebLogic 12.2.1.4 General Availability (GA) installation image.
GA images are suitable for demonstration and development purposes only where the environments are not available from the public Internet; they are not acceptable for production use.</description>
    </item>
    
    <item>
      <title>Domain secret mismatch</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/domain-secret-mismatch/</link>
      <pubDate>Mon, 02 Mar 2020 08:08:19 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/domain-secret-mismatch/</guid>
      <description>One or more WebLogic Server instances in my domain will not start and the Domain status or the pod log reports errors like this:
Domain secret mismatch. The domain secret in DOMAIN_HOME/security/SerializedSystemIni.dat where DOMAIN_HOME=$DOMAIN_HOME does not match the domain secret found by the introspector job. WebLogic requires that all WebLogic Servers in the same domain share the same domain secret.
When you see these kinds of errors, it means that the WebLogic domain directory&amp;rsquo;s security configuration files have changed in an incompatible way between when the operator scanned the domain directory, which occurs during the &amp;ldquo;introspection&amp;rdquo; phase, and when the server instance attempted to start.</description>
    </item>
    
    <item>
      <title>Mutate the domain layer</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/mutate-the-domain-layer/</link>
      <pubDate>Thu, 11 Apr 2019 13:43:41 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/mutate-the-domain-layer/</guid>
      <description>If you need to mutate the domain layer, and keep the same domain encryption keys, then there are some choices about how to implement that, as alluded to previously. Let&amp;rsquo;s explore those in some more detail now.
The first option is to implement each mutation as a delta to the previous state. This is conceptually similar to how immutable objects (like Java Strings) are implemented, a &amp;ldquo;copy on write&amp;rdquo; approach applied to the domain configuration as a unit.</description>
    </item>
    
    <item>
      <title>Use port forwarding</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/accessing-the-domain/port-forward/</link>
      <pubDate>Sat, 23 Feb 2019 17:39:15 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/accessing-the-domain/port-forward/</guid>
      <description>Contents Overview Set up Administration Server network channels for port forward access Port forward to an Administration Server Pod Port forward example Port forward notes and warnings Enabling WLST access when local and remote ports do not match Terminating port forwarding Overview Beginning with WebLogic Kubernetes Operator version 3.3.2, or earlier if you are using an Istio-enabled domain, you can use the kubectl port-forward command to set up external access for the WebLogic Server Administration Console, the Remote Console, and WLST.</description>
    </item>
    
    <item>
      <title>Service accounts</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/service-accounts/</link>
      <pubDate>Sat, 23 Feb 2019 17:36:12 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/service-accounts/</guid>
      <description>This document is now located in the operator user guide, see Service Accounts.</description>
    </item>
    
    <item>
      <title>Update 2</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update2/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update2/</guid>
      <description>This use case demonstrates concurrently deploying a domain that is similar to the Update 1 use case domain to the same sample-domain1-ns namespace, but with a different domain UID, a different WebLogic domain name, and a different WebLogic domain encryption key. It does this by:
Using the same image, image model YAML file, and application archive as the Initial and Update 1 use cases. Using the same model update ConfigMap source file as the Update 1 use case (a data source).</description>
    </item>
    
    <item>
      <title>Integration tests</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/integration-tests/</link>
      <pubDate>Sat, 23 Feb 2019 17:23:22 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/integration-tests/</guid>
      <description>The project includes integration tests that can be run against a Kubernetes cluster. If you want to use these tests, you will need to provide your own Kubernetes cluster. The Kubernetes cluster must meet the version number requirements and have Helm installed. Ensure that the operator image is in a container registry visible to the Kubernetes cluster.
You will need to obtain the kube.config file for an administrative user and make it available on the machine running the build.</description>
    </item>
    
    <item>
      <title>Branching</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/branching/</link>
      <pubDate>Sat, 23 Feb 2019 17:19:29 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/branching/</guid>
      <description>The main branch is protected and contains source for the latest completed features and bug fixes. While this branch contains active work, we expect to keep it always &amp;ldquo;ready to release.&amp;rdquo; Therefore, longer running feature work will be performed on specific branches, such as feature/dynamic-clusters.
Because we want to balance separating destabilizing work into feature branches against the possibility of later difficult merges, we encourage developers working on features to pull out any necessary refactoring or improvements that are general purpose into their own shorter-lived branches and create pull requests to main when these smaller work items are completed.</description>
    </item>
    
    <item>
      <title>Configuration reference</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/using-helm/</link>
      <pubDate>Sat, 23 Feb 2019 17:08:43 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/using-helm/</guid>
      <description>Contents Introduction Useful Helm operations Operator Helm configuration values Overall operator information serviceAccount kubernetesPlatform enableClusterRoleBinding Creating the operator pod image imagePullPolicy imagePullSecrets annotations labels nodeSelector affinity WebLogic domain management domainNamespaceSelectionStrategy domainNamespaces domainNamespaceLabelSelector domainNamespaceRegExp domainPresenceFailureRetryMaxCount and domainPresenceFailureRetrySeconds introspectorJobNameSuffix and externalServiceNameSuffix clusterSizePaddingValidationEnabled istioLocalhostBindingsEnabled Elastic Stack integration elkIntegrationEnabled logStashImage elasticSearchHost elasticSearchPort createLogStashConfigMap REST interface configuration externalRestEnabled externalRestHttpsPort externalRestIdentitySecret externalOperatorCert (Deprecated) externalOperatorKey (Deprecated) tokenReviewAuthentication Debugging options javaLoggingLevel remoteDebugNodePortEnabled internalDebugHttpPort externalDebugHttpPort Introduction The operator requires Helm for its installation and tuning, and this document is a reference guide for useful Helm commands and operator configuration values.</description>
    </item>
    
    <item>
      <title>Access domain images</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/access-images/</link>
      <pubDate>Sat, 23 Feb 2019 16:45:55 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/base-images/access-images/</guid>
      <description>In most operator samples, it is assumed that the Kubernetes cluster has a single worker node and any images that are needed by that node have either been created on that node or externally pulled to the node from a registry (using docker pull). This is fine for most demonstration purposes, and if this assumption is correct, then no additional steps are needed to ensure that Kubernetes has access to the image.</description>
    </item>
    
    <item>
      <title>Get help</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/get-help/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:10 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/introduction/get-help/</guid>
      <description>Oracle Slack We have a closely monitored public Slack channel where you can get in touch with us to ask questions about using the operator or give us feedback or suggestions about what features and improvements you would like to see. We can also create dedicated private channels upon request. We would love to hear from you.
To join our public channel, please visit this site to get an invitation. The invitation email will include details of how to access our Slack workspace.</description>
    </item>
    
    <item>
      <title>Install the operator and ingress controller</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/install/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/install/</guid>
      <description>Use Helm to install the operator and Traefik ingress controller. First, set up Helm:
$ helm repo add traefik https://helm.traefik.io/traefik --force-update Create a Traefik ingress controller. Create a namespace for the ingress controller.
$ kubectl create namespace traefik Use the values.yaml file in the sample but set kubernetes.namespaces specifically.
$ helm install traefik-operator traefik/traefik \ --namespace traefik \ --values kubernetes/samples/charts/traefik/values.yaml \ --set &amp;#34;kubernetes.namespaces={traefik}&amp;#34; Install the operator. Create a namespace for the operator:</description>
    </item>
    
    <item>
      <title>Domain introspection</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/introspection/</link>
      <pubDate>Tue, 07 Jul 2020 08:14:51 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/introspection/</guid>
      <description>Contents Overview When introspection occurs automatically Initiating introspection Failed introspection Introspection use cases Overview This document describes domain introspection, when it occurs automatically, and how and when to initiate additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.
To manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic domain configuration using an &amp;ldquo;introspection&amp;rdquo; job. This Job will be named DOMAIN_UID-introspector, will be run in the same namespace as the Domain, and must successfully complete before the operator will begin to start WebLogic Server instances.</description>
    </item>
    
    <item>
      <title>Node heating problem</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/node-heating/</link>
      <pubDate>Wed, 03 Jun 2020 08:08:19 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/node-heating/</guid>
      <description>The WebLogic Kubernetes Operator creates a Pod for each WebLogic Server instance that is started. The Kubernetes Scheduler then selects a Node for each Pod. Because the default scheduling algorithm gives substantial weight to selecting a Node where the necessary container images have already been pulled, this often results in Kubernetes running many of the Pods for WebLogic Server instances on the same Node while other Nodes are not fairly utilized.</description>
    </item>
    
    <item>
      <title>Namespace management</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/namespace-management/</link>
      <pubDate>Thu, 19 Sep 2019 10:41:32 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/namespace-management/</guid>
      <description>Contents Overview Choose a domain namespace selection strategy Ensuring the operator has permission to manage a namespace Check the namespaces that a running operator manages Altering namespaces for a running operator Add a Kubernetes namespace to a running operator Delete a Kubernetes namespace from a running operator Recreate a previously deleted Kubernetes namespace with a running operator Overview An operator deployment must be configured to manage Kubernetes namespaces, and a number of Kubernetes resources must be present in a namespace before any WebLogic Server instances can be successfully started by operator.</description>
    </item>
    
    <item>
      <title>Copy domains</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/how-to-copy-domains/</link>
      <pubDate>Thu, 11 Apr 2019 13:48:15 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/how-to-copy-domains/</guid>
      <description>The recommended approach to save a copy of a Domain in Image or Domain in PV domain is to simply ZIP (or tar) the domain directory. However, there is a very important caveat with this recommendation - when you unzip the domain, it must go back into exactly the same location (Domain Home) in the (new) file system. Using this approach will maintain the same domain encryption key.
The best practice/recommended approach is to create a &amp;ldquo;primordial domain&amp;rdquo; which does not contain any applications or resources, and to create a ZIP file of this domain before starting any servers.</description>
    </item>
    
    <item>
      <title>Update 3</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update3/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update3/</guid>
      <description>The Update 3 use case demonstrates deploying an updated WebLogic application to the running Update 1 use case domain using an updated image.
In the use case, you will:
Create an image model-in-image:WLS-v2 that is similar to the currently active model-in-image:WLS-v1 image, but with the following updates: An updated web application v2 at the myapp-v2 directory path within the WDT application archive instead of myapp-v1. An updated model YAML file within the image that points to the new web application path.</description>
    </item>
    
    <item>
      <title>Coding standards</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/coding-standards/</link>
      <pubDate>Sat, 23 Feb 2019 17:24:10 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/coding-standards/</guid>
      <description>This project has adopted the following coding standards:
Code should be formatted using Oracle / WebLogic standards, which are identical to the Google Java Style. Javadoc must be provided for all public packages, classes, and methods, and must include all parameters and returns. Javadoc is not required for methods that override or implement methods that are already documented. All non-trivial methods should include LOGGER.entering() and LOGGER.exiting() calls. The LOGGER.exiting() call should include the value that is going to be returned from the method, unless that value includes a credential or other sensitive information.</description>
    </item>
    
    <item>
      <title>RBAC</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/rbac/</link>
      <pubDate>Sat, 23 Feb 2019 17:15:36 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/rbac/</guid>
      <description>This document is now located in the operator user guide, see RBAC.</description>
    </item>
    
    <item>
      <title>Prepare for a domain</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/prepare/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/prepare/</guid>
      <description>Create and label a namespace that can host one or more domains:
$ kubectl create namespace sample-domain1-ns $ kubectl label ns sample-domain1-ns weblogic-operator=enabled Configure Traefik to manage ingresses created in this namespace:
$ helm upgrade traefik-operator traefik/traefik \ --namespace traefik \ --reuse-values \ --set &amp;#34;kubernetes.namespaces={traefik,sample-domain1-ns}&amp;#34; If you have reached this point while following the &amp;ldquo;Model in Image&amp;rdquo; sample, please stop here and return to the sample instructions.</description>
    </item>
    
    <item>
      <title>Disabling Fast Application Notifications</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/fan/</link>
      <pubDate>Fri, 11 Oct 2019 17:20:00 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/fan/</guid>
      <description>To support Fast Application Notifications (FAN), Oracle databases configure GRID (Oracle Grid Infrastructure). GRID is typically associated with (and required by) Oracle RAC databases but can also be used in other configurations. Oracle Autonomous Database-Serverless (ATP-S) does not provide GRID.
When connecting to a database that does not have GRID, the only type of WebLogic Server data source that is supported is the Generic Data Sources. Multi Data Sources and Active GridLink data sources cannot be used because they work with RAC.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/tools/</link>
      <pubDate>Thu, 11 Apr 2019 13:50:15 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/cicd/tools/</guid>
      <description>WebLogic Deploy Tooling (WDT) You can use several of the WDT tools in a CI/CD pipeline. For example, the createDomain tool creates a new domain based on a simple model, and updateDomain (and deployApps) uses the same model concept to update an existing domain (preserving the same domain encryption key). The deployApps tool is very similar to the updateDomain tool, but limits what can be updated to application-related configuration attributes such as data sources and application archives.</description>
    </item>
    
    <item>
      <title>Liveness and readiness probes customization</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization/</link>
      <pubDate>Sat, 23 Feb 2019 20:58:51 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/liveness-readiness-probe-customization/</guid>
      <description>This document describes how to customize the liveness and readiness probes for WebLogic Server instance Pods.
Contents Liveness probe customization Readiness probe customization Liveness probe customization The liveness probe is configured to check that a server is alive by querying the Node Manager process. By default, the liveness probe is configured to check liveness every 45 seconds, to timeout after 5 seconds, and to perform the first check after 30 seconds.</description>
    </item>
    
    <item>
      <title>Secrets</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/secrets/</link>
      <pubDate>Sat, 23 Feb 2019 17:36:33 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/secrets/</guid>
      <description>Contents Domain credentials secret Domain image pull secret Domain configuration override or runtime update secrets Operator image pull secret Operator external REST interface secret Operator internal REST interface secret Domain credentials secret The credentials for the WebLogic domain are kept in a Kubernetes Secret where the name of the secret is specified using webLogicCredentialsSecret in the WebLogic Domain resource. Also, the domain credentials secret must be created in the namespace where the Domain will be running.</description>
    </item>
    
    <item>
      <title>Service accounts</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/service-accounts/</link>
      <pubDate>Sat, 23 Feb 2019 17:36:12 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/service-accounts/</guid>
      <description>WebLogic Kubernetes Operator ServiceAccounts When the operator is installed, the Helm chart property, serviceAccount, can be specified where the value contains the name of the Kubernetes ServiceAccount in the namespace in which the operator will be installed.
The operator will use this service account when calling the Kubernetes API server and the appropriate access controls will be created for this ServiceAccount by the operator&amp;rsquo;s Helm chart.
To display the service account used by the operator, where the operator was installed using the Helm release name weblogic-operator, look for the serviceAccount value using the Helm command:</description>
    </item>
    
    <item>
      <title>Update 4</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update4/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/update4/</guid>
      <description>This use case demonstrates dynamically changing the Work Manager threads constraint and data source configuration in your running domain without restarting (rolling) running WebLogic Servers. This use case requires that the Update 1 use case has been run and expects that its sample-domain1 domain is deployed and running.
In the use case, you will:
Update the ConfigMap containing the WDT model created in the Update 1 use case with changes to the Work Manager threads constraint configuration.</description>
    </item>
    
    <item>
      <title>Code structure</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/code-structure/</link>
      <pubDate>Sat, 23 Feb 2019 17:25:04 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/code-structure/</guid>
      <description>This project has the following directory structure:
documentation/latest: This documentation documentation/&amp;lt;numbered directory&amp;gt;: The archived documentation for a previous release documentation/charts: Helm chart repository documentation/swagger: The operator REST API swagger documentation/domains: Reference for Domain resource schema json-schema-generator: Java model to JSON schema generator json-schema-maven-plugin: Maven plugin for schema generator kubernetes/charts: Helm charts kubernetes/samples: All samples, including for WebLogic domain creation integration-tests: JUnit 5 integration test suite operator: Operator runtime swagger-generator: Swagger file generator for the Kubernetes API server and Domain type Watch package The Watch API in the Kubernetes Java client provides a watch capability across a specific list of resources for a limited amount of time.</description>
    </item>
    
    <item>
      <title>Create a domain</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/create-domain/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/create-domain/</guid>
      <description>For use in the following steps:
Select a user name and password, following the required rules for password creation (at least 8 alphanumeric characters with at least one number or special character). Pick or create a directory to which you can write output. Create a Kubernetes Secret for the WebLogic domain administrator credentials containing the username and password for the domain, using the create-weblogic-credentials script:
$ kubernetes/samples/scripts/create-weblogic-domain-credentials/create-weblogic-credentials.sh \ -u &amp;lt;username&amp;gt; -p &amp;lt;password&amp;gt; -n sample-domain1-ns -d sample-domain1 The sample will create a secret named domainUID-weblogic-credentials where the domainUID is replaced with the value specified by the -d flag.</description>
    </item>
    
    <item>
      <title>Lifecycle scripts</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/scripts/</link>
      <pubDate>Sun, 05 Dec 2021 17:04:41 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-lifecycle/scripts/</guid>
      <description>Beginning in version 3.1.0, the operator provides sample scripts to start up or shut down a specific Managed Server or cluster in a deployed domain, or the entire deployed domain.
Versions 3.2 and 3.3 have subsequently added sample scripts for restarting a server, scaling a cluster, rolling a domain or a cluster, monitoring a cluster, and reinitiating introspection.
The scripts are located in the kubernetes/samples/scripts/domain-lifecycle directory. They are helpful when scripting the life cycle of a WebLogic Server domain.</description>
    </item>
    
    <item>
      <title>Using OCI File Storage (FSS) for persistent volumes</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/oci-fss-pv/</link>
      <pubDate>Wed, 12 Feb 2020 12:12:12 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/oci-fss-pv/</guid>
      <description>If you are running your Kubernetes cluster on Oracle Container Engine for Kubernetes (commonly known as OKE), and you use OCI File Storage (FSS) for persistent volumes to store the WebLogic domain home, then the file system handling, as demonstrated in the operator persistent volume sample, will require an update to properly initialize the file ownership on the persistent volume when the domain is initially created.
File permission handling on persistent volumes can differ between cloud providers and even with the underlying storage handling on Linux based systems.</description>
    </item>
    
    <item>
      <title>OpenShift</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/openshift/</link>
      <pubDate>Fri, 04 Oct 2019 08:08:08 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/security/openshift/</guid>
      <description>Security requirements to run WebLogic in OpenShift WebLogic Kubernetes Operator images starting with version 3.1 and WebLogic Server or Fusion Middleware Infrastructure images obtained from Oracle Container Registry after August 2020 have an oracle user with UID 1000 with the default group set to root.
Here is an excerpt from a standard WebLogic Dockerfile that demonstrates how the file system group ownership is configured in the standard WebLogic Server images:</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/cleanup/</link>
      <pubDate>Sat, 23 Feb 2019 17:32:31 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/samples/domains/model-in-image/cleanup/</guid>
      <description>To remove the resources you have created in these samples:
Delete the resources associated with the domain.
$ /tmp/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain1 $ /tmp/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain2 This deletes the domain and any related resources that are labeled with the domain UID sample-domain1 and sample-domain2.
It leaves the namespace intact, the operator running, the load balancer running (if installed), and the database running (if installed).
NOTE: When you delete a domain, the operator will detect your domain deletion and shut down its pods.</description>
    </item>
    
    <item>
      <title>Asynchronous call model</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/asynchronous-call-model/</link>
      <pubDate>Sat, 23 Feb 2019 17:20:00 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/asynchronous-call-model/</guid>
      <description>Our expectation is that customers will task the operator with managing hundreds of WebLogic domains across dozens of Kubernetes Namespaces. Therefore, we have designed the operator with an efficient user-level threads pattern. We&amp;rsquo;ve used that pattern to implement an asynchronous call model for Kubernetes API requests. This call model has built-in support for timeouts, retries with exponential back-off, and lists that exceed the requested maximum size using the continuance functionality.</description>
    </item>
    
    <item>
      <title>RBAC</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/rbac/</link>
      <pubDate>Sat, 23 Feb 2019 17:15:36 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/rbac/</guid>
      <description>Contents Overview Operator RBAC definitions Role and RoleBinding naming conventions ClusterRole and ClusterRoleBinding naming conventions RoleBindings ClusterRoleBindings Overview This document describes the Kubernetes Role-Based Access Control (RBAC) roles that an operator installation Helm chart automatically creates for you.
The general design goal of the operator installation is to automatically provide the operator with the minimum amount of permissions that the operator requires and to favor built-in roles over custom roles where it makes sense to use the Kubernetes built-in roles.</description>
    </item>
    
    <item>
      <title>Clean up</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/cleanup/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/quickstart/cleanup/</guid>
      <description>Remove the domain. Remove the domain&amp;rsquo;s ingress by using helm:
$ helm uninstall sample-domain1-ingress -n sample-domain1-ns Remove the Kubernetes resources associated with the domain by using the sample delete-weblogic-domain-resources script:
$ kubernetes/samples/scripts/delete-domain/delete-weblogic-domain-resources.sh -d sample-domain1 Use kubectl to confirm that the WebLogic Server instance Pods and Domain are gone:
$ kubectl get pods -n sample-domain1-ns $ kubectl get domains -n sample-domain1-ns Remove the domain namespace. Configure the Traefik ingress controller to stop managing the ingresses in the domain namespace:</description>
    </item>
    
    <item>
      <title>Using an OCI load balancer</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/oci-lb/</link>
      <pubDate>Wed, 25 Sep 2019 12:41:38 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/oci-lb/</guid>
      <description>If you are running your Kubernetes cluster on Oracle Container Engine for Kubernetes (commonly known as OKE), then you can have OCI automatically provision load balancers for you by creating a Service of type LoadBalancer instead of (or in addition to) installing an ingress controller like Traefik.
OKE Kubernetes worker nodes typically do not have public IP addresses. This means that the NodePort services created by the operator are not usable, because they would expose ports on the worker node&amp;rsquo;s private IP addresses only, which are not reachable from outside the cluster.</description>
    </item>
    
    <item>
      <title>Domain processing</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/domain-processing/</link>
      <pubDate>Sat, 23 Feb 2019 17:20:20 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/domain-processing/</guid>
      <description>When the operator starts, it lists all the existing Domains and then processes these Domains to create the necessary Kubernetes resources, such as Pods and Services, if they don&amp;rsquo;t already exist. This initialization also includes looking for any stranded resources that, while created by the operator, no longer correlate with a Domain.
After this, the operator starts watches for changes to Domains and any changes to other resources created by the operator.</description>
    </item>
    
    <item>
      <title>REST services</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/the-rest-api/</link>
      <pubDate>Sat, 23 Feb 2019 17:08:32 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/the-rest-api/</guid>
      <description>Contents Introduction Configure the operator&amp;rsquo;s external REST HTTPS interface Updating operator external certificates Use the operator&amp;rsquo;s REST services How to add your certificate to your operating system trust store Sample SSL certificate and private key for the REST interface Sample operator REST client script Introduction The operator provides an optional REST API for advanced users. You can use the API as an alternative method for getting a list of WebLogic domains and clusters (for example, instead of calling kubectl get domains), or for getting certain aspects of a domain&amp;rsquo;s status (for example, instead of calling kubectl get domain MYDOMAIN -o yaml).</description>
    </item>
    
    <item>
      <title>Providing access to a PersistentVolumeClaim</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/volumes/</link>
      <pubDate>Tue, 07 Jan 2020 15:02:28 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/volumes/</guid>
      <description>I need to provide an instance with access to a PersistentVolumeClaim.
Some applications need access to a file, either to read data or to provide additional logging beyond what is built into the operator. One common way of doing that within Kubernetes is to create a PersistentVolumeClaim (PVC) and map it to a file. The domain configuration can then be used to provide access to the claim across the domain, within a single cluster, or for a single server.</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/documentation/</link>
      <pubDate>Tue, 19 Mar 2019 07:13:22 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/documentation/</guid>
      <description>This documentation is produced using Hugo. To make an update to the documentation, follow this process:
If you have not already done so, clone the repository.
$ git clone https://github.com/oracle/weblogic-kubernetes-operator Create a new branch.
$ git checkout -b your-branch Make your documentation updates by editing the source files in documentation/staging/content. Make sure you check in the changes from the documentation/staging/content area only; do not build the site and check in the static files.</description>
    </item>
    
    <item>
      <title>Backward compatibility</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/backwards-compatibility/</link>
      <pubDate>Sat, 23 Feb 2019 17:26:09 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/developerguide/backwards-compatibility/</guid>
      <description>Starting with the 2.0.1 release, operator releases must be backward compatible with respect to the Domain schema, operator Helm chart input values, configuration overrides template, Kubernetes resources created by the operator Helm chart, Kubernetes resources created by the operator, and the operator REST interface. We will maintain compatibility for three releases, except in the case of a clearly communicated deprecated feature, which will be maintained for one release after a replacement is available.</description>
    </item>
    
    <item>
      <title>Domain events</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-events/</link>
      <pubDate>Mon, 30 Nov 2020 16:43:45 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/domain-events/</guid>
      <description>Contents Overview Operator-generated event types Operator-generated event details How to access the events Examples of generated events Overview This document describes Kubernetes events that the operator generates about resources that it manages, during key points of its processing workflow. These events provide an additional way of monitoring your domain resources. Note that the Kubernetes server also generates events for standard Kubernetes resources, such as pods, services, and jobs that the operator generates on behalf of deployed domain custom resources.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/overview/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/overview/</guid>
      <description>Contents Introduction WebLogic Deploy Tool models Runtime behavior Runtime updates Continuous integration and delivery (CI/CD) References Introduction Model in Image is an alternative to the operator&amp;rsquo;s Domain in Image and Domain in PV domain types. See Choose a domain home source type for a comparison of operator domain types.
Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your Domain YAML file.</description>
    </item>
    
    <item>
      <title>Providing access to a ConfigMap</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/configmaps/</link>
      <pubDate>Tue, 07 Jan 2020 15:02:28 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/configmaps/</guid>
      <description>I need to provide an instance with access to a ConfigMap.
Configuration files can be supplied to Kubernetes Pods and Jobs by a ConfigMap, which consists of a set of key-value pairs. Each entry may be accessed by one or more operator-managed nodes as a read-only text file. Access can be provided across the domain, within a single cluster, or for a single server. In each case, the access is configured within the serverPod element of the desired scope.</description>
    </item>
    
    <item>
      <title>Common mistakes and solutions</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/common-mistakes/</link>
      <pubDate>Sat, 23 Feb 2019 17:08:43 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/common-mistakes/</guid>
      <description>Contents Namespace related Deleting and recreating a namespace that an operator manages without informing the operator Forgetting to configure the operator to monitor a namespace Installing the operator a second time into the same namespace Installing an operator and having it manage a domain namespace that another operator is already managing Upgrading an operator and having it manage a domain namespace that another operator is already managing Installing an operator and having it manage a domain namespace that doesn&amp;rsquo;t exist Upgrading an operator and having it manage a domain namespace that doesn&amp;rsquo;t exist REST port conflict Installing an operator and assigning it the same external REST port number as another operator Upgrading an operator and assigning it the same external REST port number as another operator Missing service account Installing an operator and assigning it a service account that doesn&amp;rsquo;t exist Upgrading an operator and assigning it a service account that doesn&amp;rsquo;t exist Namespace related Common namespace-related mistakes.</description>
    </item>
    
    <item>
      <title>External WebLogic clients</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/external-clients/</link>
      <pubDate>Thu, 21 Nov 2019 21:23:03 +0000</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/external-clients/</guid>
      <description>Contents Overview Load balancer tunneling Adding a WebLogic custom channel When is a WebLogic custom channel needed? Configuring a WebLogic custom channel WebLogic custom channel notes Kubernetes NodePorts NodePort overview NodePort warnings NodePort steps Setting up a NodePort Sample NodePort resource Table of NodePort attributes Enabling unknown host access When is it necessary to enable unknown host access? How to enable unknown host access Configuring WebLogic Server affinity load balancing algorithms Configuring external listen addresses for WebLogic default channels Security notes Optional reading Overview If a WebLogic EJB or JMS resource is located in the same Kubernetes namespace as an application that calls the resource, then:</description>
    </item>
    
    <item>
      <title>Istio support</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/istio/istio/</link>
      <pubDate>Thu, 15 Aug 2019 13:30:04 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/istio/istio/</guid>
      <description>Contents Overview Limitations Determining the Istio version Setting up an operator with Istio support Creating a domain with Istio support Setting up the domain namespace Configuring the domain resource Applying a Domain YAML file Exposing applications in Istio-enabled domains Traffic management Distributed tracing Automatically added network channels Added network channels for Istio versions prior to v1.10 Added network channel for Istio versions v1.10 and later Added network channel for WebLogic EJB and servlet session state replication traffic Security Mutual TLS Authorization policy Destination rule Ingress gateway Overview These instructions assume that you are using a Kubernetes cluster with Istio installed and configured already.</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/troubleshooting/</link>
      <pubDate>Sat, 23 Feb 2019 16:47:21 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-operators/troubleshooting/</guid>
      <description>Contents Troubleshooting a particular domain resource Check Helm status Ensure the operator CRD is installed Check the operator deployment Check common issues Check for events Check the operator log Operator ConfigMap Force the operator to restart Operator logging level See also Troubleshooting a particular domain resource After you have an installed and running operator, it is rarely but sometimes necessary to debug the operator itself. If you are having problems with a particular domain resource, then first see Domain debugging.</description>
    </item>
    
    <item>
      <title>Coherence requirements</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/coherence-requirements/</link>
      <pubDate>Mon, 12 Aug 2019 12:41:38 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/coherence-requirements/</guid>
      <description>If you are running Coherence on Kubernetes, either inside a WebLogic domain or standalone, then there are some additional requirements to make sure that Coherence can form clusters.
Note that some Fusion Middleware products, like SOA Suite, use Coherence and so these requirements apply to them.
Unicast and Well Known Address When the first Coherence process starts, it will form a cluster. The next Coherence process to start (for example, in a different pod), will use UDP to try to contact the senior member.</description>
    </item>
    
    <item>
      <title>Set up Kubernetes</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/kubernetes/k8s-setup/</link>
      <pubDate>Sat, 23 Feb 2019 16:43:10 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/kubernetes/k8s-setup/</guid>
      <description>Contents Cheat sheet for setting up Kubernetes Set up Kubernetes on bare compute resources in a cloud Prerequisites Quick start Install Kubernetes on your own compute resources Install Docker for Mac with Kubernetes Cheat sheet for setting up Kubernetes If you need some help setting up a Kubernetes environment to experiment with the operator, please read on! The supported environments are either an on-premises installation of Kubernetes, for example, on bare metal, or on a cloud provider like Oracle Cloud, Microsoft Azure, Google, or Amazon.</description>
    </item>
    
    <item>
      <title>Pod memory and CPU resources</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/resource-settings/</link>
      <pubDate>Tue, 30 Jun 2020 08:55:00 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/resource-settings/</guid>
      <description>Contents Introduction Setting resource requests and limits in a Domain resource Determining Pod Quality Of Service Java heap size and memory resource considerations Importance of setting heap size and memory resources Default heap sizes Configuring heap size CPU resource considerations Operator sample heap and resource configuration Configuring CPU affinity Measuring JVM heap, Pod CPU, and Pod memory References Introduction The CPU and memory requests and limits for WebLogic Server Pods usually need to be tuned where the optimal values depend on your workload, applications, and the Kubernetes environment.</description>
    </item>
    
    <item>
      <title>Scheduling pods to particular nodes</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/node-selector/</link>
      <pubDate>Tue, 30 Jun 2020 08:55:00 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/node-selector/</guid>
      <description>How do I constrain scheduling WebLogic Server pods to a particular set of nodes?
To do this:
First, set a label on the nodes on which the WebLogic Server pods will run. For example:
$ kubectl label nodes name=weblogic-pods In the Domain CR, set a nodeSelector: a selector which must match a node&amp;rsquo;s labels for the pod to be scheduled on that node. See kubectl explain pods.spec.nodeSelector.
You can set nodeSelector labels for WebLogic Server pods, all server pods in a cluster, or all server pods in a domain.</description>
    </item>
    
    <item>
      <title>Handling security validations</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/security-validation/</link>
      <pubDate>Tue, 30 Jun 2020 08:55:00 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/faq/security-validation/</guid>
      <description>After applying the July2021 PSU, I&amp;rsquo;m now seeing security warnings, such as:
Description: Production Mode is enabled but user lockout settings are not secure in realm: myrealm, i.e. LockoutThreshold should not be greater than 5, LockoutDuration should not be less than 30.
SOLUTION: Update the user lockout settings (LockoutThreshold, LockoutDuration) to be secure.
WebLogic Server has a new, important feature to ensure and help you secure your WLS domains when running in production.</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/usage/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/usage/</guid>
      <description>This document describes what&amp;rsquo;s needed to create and deploy a typical Model in Image domain.
Contents WebLogic Kubernetes Operator WebLogic Server image Directory structure Supplying initial model files and WDT Optional WDT model ConfigMap Required runtime encryption secret Secrets for model macros Domain fields Always use external state WebLogic Kubernetes Operator Deploy the operator and ensure that it is monitoring the desired namespace for your Model in Image domain. See Manage operators and Quick Start.</description>
    </item>
    
    <item>
      <title>Auxiliary images</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/auxiliary-images/</link>
      <pubDate>Sat, 23 Feb 2019 16:45:16 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/auxiliary-images/</guid>
      <description>Contents Introduction References Configuration Auxiliary volumes and paths Auxiliary images Model in Image paths Merge order Expected merge order Performing replaces instead of merges Merge ordering example Sample Step 1: Prerequisites Step 2: Create the auxiliary image Step 3: Prepare and apply the domain resource Step 4: Invoke the web application Introduction Auxiliary images are an alternative approach for including Model in Image model files, application archive files, WebLogic Deploy Tooling installation files, or other types of files, in your pods.</description>
    </item>
    
    <item>
      <title>Model files</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/model-files/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/model-files/</guid>
      <description>Contents Introduction Sample model file Important notes about Model in Image model files Model file naming and loading order Model file macros Using secrets in model files Using environment variables in model files Combining secrets and environment variables in model files Introduction This document describes basic Model in Image model file syntax, naming, and macros. For additional information, see the WebLogic Deploy Tool documentation.
The WDT Discover Domain Tool is particularly useful for generating model files from an existing domain home.</description>
    </item>
    
    <item>
      <title>Runtime updates</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/runtime-updates/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/runtime-updates/</guid>
      <description>Contents Overview Supported updates Unsupported updates Updating an existing model Offline updates Offline update steps Offline update sample Online updates Online update steps Online update handling of non-dynamic WebLogic configuration changes Online update handling of deletes Online update status and labels Online update scenarios Online update sample Appendices Using the WDT Discover and Compare Model Tools below. Changing a Domain restartVersion or introspectVersion Overview If you want to make a WebLogic domain home configuration update to a running Model in Image domain, and you want the update to survive WebLogic Server pod restarts, then you must modify your existing model and instruct the WebLogic Kubernetes Operator to propagate the change.</description>
    </item>
    
    <item>
      <title>Domain debugging</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/debugging/</link>
      <pubDate>Wed, 11 Mar 2020 16:45:16 -0500</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/userguide/managing-domains/model-in-image/debugging/</guid>
      <description>Here are some suggestions for debugging problems with a domain after your Domain YAML file is deployed.
Contents Check the Domain status Check the Domain events Check the introspector job Check the WebLogic Server pods Check the operator log Check the docs Check the operator Check the Domain status To check the Domain status: kubectl -n MY_NAMESPACE describe domain MY_DOMAINUID.
If you are performing an online update to a running domain&amp;rsquo;s WebLogic configuration, then see Online update status and labels.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://oracle.github.io/weblogic-kubernetes-operator/3.4/release-notes/</link>
      <pubDate>Fri, 15 Mar 2019 11:25:28 -0400</pubDate>
      
      <guid>https://oracle.github.io/weblogic-kubernetes-operator/3.4/release-notes/</guid>
      <description>Releases Date Version Introduces backward incompatibilities? Change - See also, Change log. April 7, 2023 v3.4.7 no Resolved and issue related to WDT models that do not include AdminServerName and an update to prevent use of the SnakeYAML empty-arguments SafeConstructor constructor. February 17, 2023 v3.4.6 no Resolved several issues related to WDT models for Model in Image, resolved an issue related to an exception while correcting container port names, and updates including the WebLogic Monitoring Exporter version.</description>
    </item>
    
  </channel>
</rss>
